<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <appSettings>
        <!--
             Option:      ReaderFilterOpcode
             Description: List of strings separated by comma. Any opcode name that matches any of these filters will be read and parsed
             Default:     "" (All)
        -->
        <add key="ReaderFilterOpcode" value=""/>

        <!--
             Option:      ReaderFilterIgnoreOpcode
             Description: List of strings separated by comma. Any opcode name that matches any of these filters will be ignored
                          If one opcode matches Filters and IgnoreFilters at same time it will be ignored
             Default:     "" (None)
        -->
        <add key="ReaderFilterIgnoreOpcode" value=""/>

        <!--
             Option:      ReaderFilterPacketsNum
             Description: Number of packets to read
             Default:     "0" (All)
        -->
        <add key="ReaderFilterPacketsNum" value="0"/>

        <!--
             Option:      ReaderFilterPacketNumLow
             Description: Minimum packet number to begin to read
             Default:     "0" (No limit)
        -->
        <add key="ReaderFilterPacketNumLow" value="0"/>
 
        <!--
             Option:      ReaderFilterPacketNumHigh
             Description: Maximum packet number to begin to read
             Default:     "0" (No limit)
        -->
        <add key="ReaderFilterPacketNumHigh" value="0"/>

        <!--
             Option:      TextOutputFilterIgnoreEntry
             Description: List of List of Entries not to be included in text output, packets containing those will be ignored
             Format:      Type:Id1:Id2:Id3,Type2:Id4:Id5:Id6
             Default:     "" (None)
        -->
        <add key="TextOutputFilterIgnoreEntry" value=""/>

        <!--
             Option:      SpawnDumpFilterArea
             Description: List of strings separated by comma. If set, only creature/gameobject spawn that are in matching area
                          will be dumped to sql file if creature/gameobject sql option is enabled
             Default:     "" (All)
        -->
        <add key="SpawnDumpFilterArea" value=""/>
      
        <!--
             Option:      ClientBuild
             Description: Force client build version
             Default:     "" (Autodetect - build is calculated based on the date of sniff)
        -->
        <add key="ClientBuild" value=""/>

        <!--
             Option:      PacketFileType
             Description: Select in which format packet data is stored in input file
             Default:     "" (Autodetect - by file extension)
             Values:      "kszor" - default binary sniff format in tc - ksniffer zor format
                          "pkt" - kamilla sniffer format
                          "tiawps" - sqlite db from tiawps sniffer
                          "sniffitzt" - xml package from sniffitzt sniffer
                          "kszack" - ksniffer zack format
                          "izi" - izidor packet format
                          "zor"
                          "newzor"
                          "wlp" - wcell's sniffer format?
        -->
        <add key="PacketFileType" value=""/>
      
        <!--
             Option:      RawOutputType
             Description: Redump input packet file as selected raw packet file type with filters applied
             Default:     "" (Don't dump as binary file)
             Values:      "kszor" - default binary sniff format in tc - ksniffer zor format
        -->
        <add key="RawOutputType" value=""/>

        <!--
             Option:      SplitRawOutput
             Description: If true split binary output in multiple files with opcode name
             Default:     "false" (Normal output)
        -->
        <add key="SplitRawOutput" value="false"/>

        <!--
             Option:      TextOutput
             Description: Set if parsed sniff data should be dumped to [inputfile]_parsed.txt
             Default:     "true"
             Values:      "false" - don't produce text output
                          "true" - produce text output
        -->
        <add key="TextOutput" value="true"/>

        <!--
             Option:      SQLOutput
             Description: Mask that determines what to write to sql output file
             Default:     "0" (No sql output)
             Values:   1: GameObjectTemplate
                       2: GameObjectSpawns
                       4: QuestTemplate
                       8: QuestPOI
                      16: CreatureTemplate
                      32: CreatureSpawns
                      64: NpcTrainer
                     128: NpcVendor
                     256: NpcText
                     512: Loot
                    1024: Gossip
                    2048: PageText
                    4096: StartInformation
                    8192: SniffData
                   16384: SniffDataOpcodes
                   32768: ObjectNames
                   65536: CreatureEquip
                  131072: CreatureMovement (Research)
                  262143: All
        -->
        <add key="SQLOutput" value="0"/>

        <!--
             Option:      SQLFileName
             Description: Sets the file to write all sql data to. If is not set each file parsed will write it's own sql file
             Default:     "" (No global sql file output)
        -->
        <add key="SQLFileName" value=""/>

        <!--
             Option:      ShowEndPrompt
             Description: Show end prompt after parsing all files
             Default:     "false" (No prompt)
        -->
        <add key="ShowEndPrompt" value="false"/>

        <!--
             Option:      LogErrors
             Description: Log ReadEnum errors (Missing enum values)
             Default:     "false" (No enum errors log)
        -->
        <add key="LogErrors" value="false"/>
        
        <!--
             Option:      LogPacketErrors
             Description: Log packet headers that were skipped or have packet errors to <snifffile>_errors.txt
             Default:     "false" (No file created)
        -->
        <add key="LogPacketErrors" value="false"/>

        <!--
             Option:      DebugReads
             Description: Show hexadecimal data when parsing any numeric value
             Default:     "false" (Do not show hexadecimal output)
        -->
        <add key="DebugReads" value="false"/>

        <!--
             Option:      ParsingLog
             Description: Write to a text file what has been printed on console
             Default:     "false"
        -->
        <add key="ParsingLog" value="false"/>
        
        <!-- SSH Tunneling settings -->
        <add key="SSHEnabled"   value="false" />
        <add key="SSHHost"      value="" />
        <add key="SSHUsername"  value="" />
        <add key="SSHPassword"  value="" />
        <add key="SSHPort"      value="22" />
        <add key="SSHLocalPort" value="3307" />

        <!-- Database settings -->
        <add key="DBEnabled"    value="false" />
        <add key="Server"       value="localhost" />
        <add key="Port"         value="3306" />
        <add key="Username"     value="root" />
        <add key="Password"     value="" />
        <add key="WPPDatabase"  value="WPP" />
        <add key="TDBDatabase"  value="world" />
        <add key="CharacterSet" value="utf8" />
    </appSettings>
</configuration>
